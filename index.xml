<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Franz'Blog</title><link>https://blog.franz1024.com/</link><description>Recent content on Franz'Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Mon, 20 Nov 2023 10:22:37 +0000</lastBuildDate><atom:link href="https://blog.franz1024.com/index.xml" rel="self" type="application/rss+xml"/><item><title>PG &amp;&amp; MyBatis中使用TypeHandler导致json字段异常赋值的线程安全问题</title><link>https://blog.franz1024.com/p/pg-mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8typehandler%E5%AF%BC%E8%87%B4json%E5%AD%97%E6%AE%B5%E5%BC%82%E5%B8%B8%E8%B5%8B%E5%80%BC%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.franz1024.com/p/pg-mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8typehandler%E5%AF%BC%E8%87%B4json%E5%AD%97%E6%AE%B5%E5%BC%82%E5%B8%B8%E8%B5%8B%E5%80%BC%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在新手时期不知道哪里抄来的代码，在低并发的时候没事，在高并发的下出问题了，浪费了不少时间记录下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">JsonTypeHandler&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BaseTypeHandler&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... 其他代码省略&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PGobject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PGobject&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">JsonTypeHandler&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setNonNullParameter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PreparedStatement&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ps&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parameter&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JdbcType&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jdbcType&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SQLException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;json&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ObjectMapper&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mapper&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ObjectMapper&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... 省略其他操作&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ps&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... 省略其他方法&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的代码中，创建了一个静态的PGobject对象jsonObject，并在setNonNullParameter方法中对其进行操作。然而，静态变量在多线程环境中可能会导致线程安全问题，因为多个线程可能会同时访问和修改这个静态变量。&lt;/p>
&lt;p>解决方法是将PGobject对象的创建和操作放在setNonNullParameter方法内部，这样每次调用setNonNullParameter方法时都会创建一个新的PGobject对象，避免多线程共享同一个对象导致的线程安全问题。&lt;/p></description></item><item><title>PostgreSQL清空数据表</title><link>https://blog.franz1024.com/p/postgresql%E6%B8%85%E7%A9%BA%E6%95%B0%E6%8D%AE%E8%A1%A8/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.franz1024.com/p/postgresql%E6%B8%85%E7%A9%BA%E6%95%B0%E6%8D%AE%E8%A1%A8/</guid><description>&lt;p>在使用PostgreSQL数据库时，有时候我们需要清空表中的数据，以便重新插入新的数据或者进行其他操作。本文将介绍在PostgreSQL中清空表的几种方法。&lt;/p>
&lt;h2 id="使用delete语句">使用DELETE语句&lt;/h2>
&lt;p>最简单的方法是使用DELETE语句来清空表中的数据。例如，如果我们有一个名为&lt;code>users&lt;/code>的表，我们可以使用以下语句来清空表中的数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">DELETE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将删除&lt;code>users&lt;/code>表中的所有数据，但是保留表的结构和约束。&lt;/p>
&lt;h2 id="使用truncate语句">使用TRUNCATE语句&lt;/h2>
&lt;p>另一种常用的方法是使用TRUNCATE语句来清空表中的数据。与DELETE不同的是，TRUNCATE语句将表中的数据全部删除，并且重置自增的序列。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">TRUNCATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是，TRUNCATE语句比DELETE语句更快，因为它不会逐条删除数据，而是直接删除整个表。但是，TRUNCATE语句无法触发ON DELETE触发器，所以在使用TRUNCATE时需要注意。&lt;/p>
&lt;h2 id="使用drop和create语句">使用DROP和CREATE语句&lt;/h2>
&lt;p>最彻底的方法是使用DROP和CREATE语句来删除表并重新创建一个空表。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">SERIAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方法将删除表的结构和约束，然后重新创建一个空表。&lt;/p>
&lt;p>清空表的方法有多种，可以根据具体情况选择合适的方法。在进行数据操作时，需要谨慎选择，以免造成不必要的损失。希望本文对你有所帮助！&lt;/p></description></item><item><title>部署简易Kafka测试环境</title><link>https://blog.franz1024.com/p/%E9%83%A8%E7%BD%B2%E7%AE%80%E6%98%93kafka%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.franz1024.com/p/%E9%83%A8%E7%BD%B2%E7%AE%80%E6%98%93kafka%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>因为Kafka依赖于&lt;a class="link" href="https://so.csdn.net/so/search?q=zookeeper&amp;amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener"
>zookeeper&lt;/a>做分布式管理，因此需要先安装zookeeper&lt;/p>
&lt;ol>
&lt;li>
&lt;p>zookeeper启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">docker run -d --name zookeeper -p 2181:2181 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-t wurstmeister/zookeeper&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>kafka启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">docker run -d --name kafka -p 9092:9092 -e &lt;span class="nv">KAFKA_BROKER_ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-e &lt;span class="nv">KAFKA_ZOOKEEPER_CONNECT&lt;/span>&lt;span class="o">=&lt;/span>124.223.***.176:2181 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-e &lt;span class="nv">KAFKA_ADVERTISED_LISTENERS&lt;/span>&lt;span class="o">=&lt;/span>PLAINTEXT://124.223.***.176:9092 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-e &lt;span class="nv">KAFKA_LISTENERS&lt;/span>&lt;span class="o">=&lt;/span>PLAINTEXT://0.0.0.0:9092 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-t wurstmeister/kafka&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Bitwarden部署与备份</title><link>https://blog.franz1024.com/post/bitwarden-z65ahd.html</link><pubDate>Mon, 20 Nov 2023 10:22:37 +0000</pubDate><guid>https://blog.franz1024.com/post/bitwarden-z65ahd.html</guid><description>&lt;ol>
&lt;li>
&lt;p>生成一个 admin 用户管理页面的 token&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">openssl rand -base64 &lt;span class="m">48&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用docker部署&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">docker run -d --name vaultwarden &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">SIGNUPS_ALLOWED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">INVITATIONS_ALLOWED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">ADMIN_TOKEN&lt;/span>&lt;span class="o">=&lt;/span>上面生成得Base64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">LOG_FILE&lt;/span>&lt;span class="o">=&lt;/span>/data/log.log &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">LOG_LEVEL&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 8081:80 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v /root/vaultwarden/:/data/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> vaultwarden/server:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>对bitwarden进行定时备份&lt;/p>
&lt;ul>
&lt;li>
&lt;p>按照官方说明，现执行 docker 镜像，获取 token。这里的镜像一大部分都是 Rclone。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">docker run –rm -it &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>–mount &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>volume,source&lt;span class="o">=&lt;/span>vaultwarden-rclone-data,target&lt;span class="o">=&lt;/span>/config/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>ttionya/vaultwarden-backup:latest rclone config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置Rclone&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行备份定时备份的docker容器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 七牛云 docker 备份配置,这里仅参考，正式备份内容见下方备份到多个位置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run -d &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --restart&lt;span class="o">=&lt;/span>always &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --name vaultwarden_backup_qiniu &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --volumes-from&lt;span class="o">=&lt;/span>vaultwarden &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --mount &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>volume,source&lt;span class="o">=&lt;/span>vaultwarden-rclone-data,target&lt;span class="o">=&lt;/span>/config/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">DATA_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/data&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">RCLONE_REMOTE_NAME&lt;/span>&lt;span class="o">=&lt;/span>BitwardenBackup_qiniu &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">RCLONE_REMOTE_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bitwarden-1024&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">ZIP_TYPE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;7z&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">CRON&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;0 */8 * * *&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">ZIP_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;压缩密码&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">BACKUP_KEEP_DAYS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;30&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> ttionya/vaultwarden-backup:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>从备份中还原&lt;/p>
&lt;ul>
&lt;li>
&lt;p>停止bitwarden容器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还原命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Bash" data-lang="Bash">&lt;span class="line">&lt;span class="cl"> docker run --rm -it &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --mount &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>bind,source&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/vaultwarden&amp;#34;&lt;/span>,target&lt;span class="o">=&lt;/span>/data/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --mount &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>bind,source&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>,target&lt;span class="o">=&lt;/span>/bitwarden/restore/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">DATA_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/data&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> ttionya/vaultwarden-backup:latest restore &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --zip-file 文件名称 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 压缩密码
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动bitwarden容器&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Nginx重启的方法以及注意事项</title><link>https://blog.franz1024.com/post/nginx-restart-method-and-precautions-zyhlkb.html</link><pubDate>Thu, 26 Oct 2023 17:17:03 +0000</pubDate><guid>https://blog.franz1024.com/post/nginx-restart-method-and-precautions-zyhlkb.html</guid><description>&lt;h2 id="1利用-linux-进程管理重启">1.利用 linux 进程管理重启&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ps -ef&lt;span class="p">|&lt;/span>grep nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将会列出 nginx 相关的进程号，如下所示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">root@ubuntu:~# ps -ef&lt;span class="p">|&lt;/span>grep nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="m">1773&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> May12 ? 00:00:00 nginx: master process nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx &lt;span class="m">22672&lt;/span> &lt;span class="m">1773&lt;/span> &lt;span class="m">0&lt;/span> 01:58 ? 00:00:00 nginx: worker process
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx &lt;span class="m">22673&lt;/span> &lt;span class="m">1773&lt;/span> &lt;span class="m">0&lt;/span> 01:58 ? 00:00:00 nginx: worker process
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="m">23617&lt;/span> &lt;span class="m">20075&lt;/span> &lt;span class="m">0&lt;/span> 02:29 pts/1 00:00:00 grep --color&lt;span class="o">=&lt;/span>auto nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后再用 kil 命令即可终止 nginx 进程，再重新执行 nginx 即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> -9 pid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以多个同时终止&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> -9 &lt;span class="m">1773&lt;/span> &lt;span class="m">22672&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样比较麻烦，而且这个过程中会中断服务的提供。那么有没有热配置，或者是不重启就可以生效呢？&lt;/p>
&lt;p>答案当然是有的。那就是使用 nginx -s reload 命令。&lt;/p>
&lt;h2 id="2-nginx--s-reload">2. nginx -s reload&lt;/h2>
&lt;p>s 代表的是向主进程发送信号。其中信号有 4 个，stop, quit, reopen, reload。&lt;/p>
&lt;p>reload 就是重新加载的意思。&lt;code>nginx -s reload&lt;/code>​ 命令，合起来的作用就是重新加载配置文件。使用此命令可以做到无缝切换服务&lt;/p>
&lt;blockquote>
&lt;p>注意事项&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>nginx -s reload&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 是平滑重启,不会强制结束正在工作的连接,需要等所有连接都结束才会重启。&lt;/span>&lt;/li>
&lt;li>&lt;span style="font-weight: bold;" data-type="strong">强烈建议在使用&lt;/span> &lt;span style="font-weight: bold;" data-type="strong">&lt;code>nginx -s reload&lt;/code>&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">时使用&lt;/span> &lt;span style="font-weight: bold;" data-type="strong">&lt;code>nginx -t&lt;/code>&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">检查配置文件是否正确&lt;/span>&lt;/li>
&lt;/ul>
&lt;p>‍&lt;/p></description></item><item><title>Linux后台运行和查看后台进程的方法</title><link>https://blog.franz1024.com/post/linux-background-running-and-viewing-the-background-process-method-zhs2a7.html</link><pubDate>Thu, 26 Oct 2023 16:27:56 +0000</pubDate><guid>https://blog.franz1024.com/post/linux-background-running-and-viewing-the-background-process-method-zhs2a7.html</guid><description>&lt;h2 id="1nohub-命令">1.nohub 命令&lt;/h2>
&lt;p>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>nohup&lt;/code>&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。&lt;/span> 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。&lt;/p>
&lt;p>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;code>nohup&lt;/code>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>命令，在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 命令，在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 &lt;span style="font-weight: bold;" data-type="strong">$HOME/nohup.out&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 文件中。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 文件中。&lt;/p>
&lt;h3 id="span-stylefont-weight-bold-data-typestrong使用权限span">&lt;span style="font-weight: bold;" data-type="strong">使用权限&lt;/span>&lt;/h3>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>所有使用者&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>所有使用者&lt;/p>
&lt;h3 id="span-stylefont-weight-bold-data-typestrong语法格式span">&lt;span style="font-weight: bold;" data-type="strong">语法格式&lt;/span>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl"> nohup Command &lt;span class="o">[&lt;/span> Arg … &lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>　&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="span-stylefont-weight-bold-data-typestrong参数说明span">&lt;span style="font-weight: bold;" data-type="strong">参数说明：&lt;/span>&lt;/h3>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">Command&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span>：要执行的命令。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：要执行的命令。&lt;/p>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">Arg&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span>：一些参数，可以指定输出文件。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：一些参数，可以指定输出文件。&lt;/p>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&amp;amp;&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span>：让命令在后台执行，终端退出后命令仍旧执行。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：让命令在后台执行，终端退出后命令仍旧执行。&lt;/p>
&lt;h3 id="span-stylefont-weight-bold-data-typestrong实例span">&lt;span style="font-weight: bold;" data-type="strong">实例&lt;/span>&lt;/h3>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>以下命令在后台执行当前目录下的java程序&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>以下命令在后台执行当前目录下的java程序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nohup java -jar ***.jar &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>这时我们打开 root 目录 可以看到生成了 nohup.out 文件。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 这时我们打开 root 目录 可以看到生成了 nohup.out 文件。&lt;/p>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>如果要停止运行，你需要使用以下命令查找到 nohup 运行脚本到 PID，然后使用 kill 命令来删除：&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 如果要停止运行，你需要使用以下命令查找到 nohup 运行脚本到 PID，然后使用 kill 命令来删除：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ps -aux &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;***.jar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>参数说明：&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 参数说明：&lt;/p>
&lt;ul>
&lt;li>&lt;span style="font-weight: bold;" data-type="strong">a&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> : 显示所有程序&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> : 显示所有程序&lt;/li>
&lt;li>&lt;span style="font-weight: bold;" data-type="strong">u&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> : 以用户为主的格式来显示&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> : 以用户为主的格式来显示&lt;/li>
&lt;li>&lt;span style="font-weight: bold;" data-type="strong">x&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> : 显示所有程序，不区分终端机&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> : 显示所有程序，不区分终端机&lt;/li>
&lt;/ul>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>另外也可以使用 &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 另外也可以使用 &lt;span style="font-weight: bold;" data-type="strong">ps -def | grep &amp;quot;runoob.sh&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&amp;quot; 命令来查找。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> &amp;quot; 命令来查找。&lt;/p>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>找到 PID 后，就可以使用 kill PID 来删除。&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 找到 PID 后，就可以使用 kill PID 来删除。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kill -9 进程号PID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>以下命令在后台执行 root 目录下的 &lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 以下命令在后台执行 root 目录下的 &lt;span style="font-weight: bold;" data-type="strong">&lt;/span>runoob.sh&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 脚本，并重定向输入到 runoob.log 文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nohup java -jar &amp;lt;span style=&amp;#34;font-weight: bold;&amp;#34; data-type=&amp;#34;strong&amp;#34;&amp;gt;*.jar &amp;gt; &amp;lt;/span&amp;gt;*.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;span style="font-weight: bold;" data-type="strong">2&amp;gt;&amp;amp;1&lt;/span> 解释：&lt;/p>
&lt;p>将标准错误 2 重定向到标准输出 &amp;amp;1 ，标准输出 &amp;amp;1 再被重定向输入到 ***.log 文件中。&lt;/p>
&lt;ul>
&lt;li>0 – stdin (standard input，标准输入)&lt;/li>
&lt;li>1 – stdout (standard output，标准输出)&lt;/li>
&lt;li>2 – stderr (standard error，标准错误输出)&lt;/li>
&lt;/ul>
&lt;h2 id="2screen-命令">2.screen 命令&lt;/h2>
&lt;p>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 是一个在 Unix 和 Unix-like 操作系统中使用的终端复用工具，它允许用户在一个终端窗口中同时运行多个独立的终端会话。这个工具非常有用，因为它可以帮助您在同一个终端窗口中运行多个任务，而不必打开多个终端窗口。以下是一些常见的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 命令和用法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">启动 &lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 会话&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">screen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行这个命令后，您将进入一个新的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话。在这个会话中，您可以执行命令，运行程序，然后将其分离（detach）以后台运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">分离 &lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 会话&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;br>
在 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话中，您可以使用以下组合键将会话分离到后台：Ctrl-a&lt;br>
这将让 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话继续在后台运行，而您可以回到原来的终端窗口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">列出 &lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 会话&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;br>
要列出当前的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话，您可以运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">screen -ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将显示当前运行的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话的列表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">重新连接到 &lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 会话&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;br>
要重新连接到以前分离的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话，使用以下命令，其中 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>&amp;lt;session_name&amp;gt;&lt;/code>&lt;/span> ​ 是您要重新连接的会话的名称或 ID：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">screen -r &amp;lt;session_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">创建具有自定义名称的 &lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 会话&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;br>
您可以使用以下命令创建一个具有自定义名称的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">screen -S &amp;lt;session_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将创建一个新的 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话并为其指定名称。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">结束 &lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ &lt;span style="font-weight: bold;" data-type="strong"> 会话&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;br>
要结束 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话，可以在会话中运行 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>exit&lt;/code>&lt;/span>​ 命令，或者按下 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>Ctrl-d&lt;/code>&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style="font-weight: bold;" data-type="strong">帮助&lt;/span>​&lt;span style="font-weight: bold;" data-type="strong">&lt;/span>&lt;span style="font-weight: bold;" data-type="strong">&lt;/span> ：&lt;br>
如果需要查看更多 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 的命令和选项，可以在 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话中按下 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>Ctrl-a ?&lt;/code>&lt;/span> ​，这将显示帮助信息。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 是一个非常强大的工具，特别适合在 SSH 连接中管理多个任务或会话。您可以在 &lt;span style="font-weight: bold;" data-type="strong">&lt;code>screen&lt;/code>&lt;/span>​ 会话中运行长时间运行的进程，然后分离会话，以便在稍后重新连接并查看输出。这对于远程服务器管理和维护非常有用。&lt;/p>
&lt;p>‍&lt;/p></description></item><item><title>Archives</title><link>https://blog.franz1024.com/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.franz1024.com/archives/</guid><description/></item><item><title>Links</title><link>https://blog.franz1024.com/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.franz1024.com/links/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub is the world&amp;#39;s largest software development platform.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.typescriptlang.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ts-logo-128.jpg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>Search</title><link>https://blog.franz1024.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.franz1024.com/search/</guid><description/></item></channel></rss>